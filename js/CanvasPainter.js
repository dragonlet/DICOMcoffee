// Generated by CoffeeScript 1.6.3
/*
@desc CanvasPainter is used to draw a Dicom file on a HTML-canvas element. Scale, windowing and pan can be altered.
@param {String} canvasId Id of the HTML-canvas element for the painter.
@author Michael Kaserer e1025263@student.tuwien.ac.at
*/


(function() {
  this.CanvasPainter = (function() {
    var calculateRatio;

    function CanvasPainter(canvasId) {
      this.canvas = document.getElementById(canvasId);
      this.context = this.canvas.getContext('2d');
      this.currentFile;
      this.series;
      this.ww;
      this.wc;
      this.scale;
      this.pan;
    }

    CanvasPainter.prototype.setSeries = function(series) {
      this.series = series;
      this.series.sort(function(a, b) {
        return a.InstanceNumber - b.InstanceNumber;
      });
      this.currentFile = this.series[0];
      this.wc = this.series[0].WindowCenter;
      this.ww = this.series[0].WindowWidth;
      this.scale = calculateRatio(this.currentFile.Columns, this.currentFile.Rows, this.canvas.width, this.canvas.height);
      return this.pan = [0, 0];
    };

    CanvasPainter.prototype.setWindowing = function(wc, ww) {
      this.wc = wc;
      this.ww = ww;
    };

    CanvasPainter.prototype.getWindowing = function() {
      return [this.wc, this.ww];
    };

    CanvasPainter.prototype.setScale = function(scale) {
      this.scale = scale;
    };

    CanvasPainter.prototype.getScale = function() {
      return this.scale;
    };

    CanvasPainter.prototype.setPan = function(panX, panY) {
      return this.pan = [panX, panY];
    };

    CanvasPainter.prototype.getPan = function() {
      return this.pan;
    };

    CanvasPainter.prototype.reset = function() {
      this.wc = this.series[0].WindowCenter;
      this.ww = this.series[0].WindowWidth;
      this.scale = calculateRatio(this.currentFile.Columns, this.currentFile.Rows, this.canvas.width, this.canvas.height);
      this.pan = [0, 0];
      return this.drawImg();
    };

    CanvasPainter.prototype.drawImg = function() {
      var height, highestVisibleValue, i, imgData, intensity, lowestVisibleValue, pixelData, targetHeight, targetWidth, tempCanvas, tempContext, width, xOffset, yOffset, _i, _ref;
      width = this.canvas.width;
      height = this.canvas.height;
      tempCanvas = document.createElement('canvas');
      tempCanvas.height = this.currentFile.Rows;
      tempCanvas.width = this.currentFile.Columns;
      tempContext = tempCanvas.getContext('2d');
      this.context.fillStyle = '#000';
      this.context.fillRect(0, 0, width, height);
      imgData = tempContext.createImageData(this.currentFile.Columns, this.currentFile.Rows);
      pixelData = this.currentFile.PixelData;
      lowestVisibleValue = this.wc - this.ww / 2.0;
      highestVisibleValue = this.wc + this.ww / 2.0;
      if (!((pixelData != null) && pixelData.length !== 0)) {
        $('#errorMsg').append("<p class='ui-state-error ui-corner-all'><span class='ui-icon ui-icon-alert'></span>Can't display image: " + this.currentFile.PatientsName + " " + this.currentFile.SeriesDescription + "</p>");
        return;
      }
      for (i = _i = 0, _ref = imgData.data.length; _i < _ref; i = _i += 4) {
        intensity = pixelData[i / 4];
        intensity = intensity * this.currentFile.RescaleSlope + this.currentFile.RescaleIntercept;
        intensity = (intensity - lowestVisibleValue) / (highestVisibleValue - lowestVisibleValue);
        intensity = intensity < 0.0 ? 0.0 : intensity;
        intensity = intensity > 1.0 ? 1.0 : intensity;
        intensity *= 255.0;
        imgData.data[i + 0] = intensity;
        imgData.data[i + 1] = intensity;
        imgData.data[i + 2] = intensity;
        imgData.data[i + 3] = 255;
      }
      targetWidth = this.scale * this.currentFile.Rows;
      targetHeight = this.scale * this.currentFile.Columns;
      xOffset = (width - targetWidth) / 2 + this.pan[0];
      yOffset = (height - targetHeight) / 2 + this.pan[1];
      tempContext.putImageData(imgData, 0, 0);
      return this.context.drawImage(tempCanvas, xOffset, yOffset, targetWidth, targetHeight);
    };

    calculateRatio = function(srcWidth, srcHeight, maxWidth, maxHeight) {
      var ratio;
      ratio = [maxWidth / srcWidth, maxHeight / srcHeight];
      return ratio = Math.min(ratio[0], ratio[1]);
    };

    return CanvasPainter;

  })();

}).call(this);
