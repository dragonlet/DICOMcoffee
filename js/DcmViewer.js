// Generated by CoffeeScript 1.6.3
/*
@desc Controller of the Dicom Viewer. Handles all user event from the GUI.
@author Michael Kaserer e1025263@student.tuwien.ac.at
*/


(function() {
  this.DcmViewer = (function() {
    var getSelector, updateInfo;

    function DcmViewer(a) {
      this.scrollIndex = 0;
      this.numFiles = 0;
      this.eventsEnabled = false;
      this.painters = [];
      this.parsedFileList = [];
      this.toolbox = new Toolbox();
      this.matrixHandler($('#matrixView').val());
      this.tree = new Tree();
      this.fileParser = new FileParser();
    }

    DcmViewer.prototype.setCurrentTool = function(tool_name) {
      return this.toolbox.setCurrentTool(tool_name);
    };

    DcmViewer.prototype.showSeries = function(files) {
      var i, index, painter, _i, _len, _ref,
        _this = this;
      this.numFiles = files.length;
      _ref = this.painters;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        painter = _ref[i];
        painter.setSeries(files);
        index = (this.scrollIndex + i) % this.numFiles;
        painter.currentFile = painter.series[index];
        this.painters[i] = painter;
        painter.drawImg();
        updateInfo(painter, getSelector(painter));
      }
      this.eventsEnabled = true;
      if (this.numFiles > 1) {
        return $('#slider').slider('option', {
          max: this.numFiles - 1,
          disabled: false,
          slide: function(e, ui) {
            return _this.scrollOne(ui.value);
          }
        });
      }
    };

    DcmViewer.prototype.inputHandler = function(e) {
      var dcmList, file, fileList,
        _this = this;
      if (e.target.files.length === 0) {
        return;
      }
      progress(e.target.files.length);
      fileList = e.target.files;
      dcmList = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fileList.length; _i < _len; _i++) {
          file = fileList[_i];
          if (file.type === 'application/dicom') {
            _results.push(file);
          }
        }
        return _results;
      })();
      return this.fileParser.parseFiles(dcmList, function(e) {
        _this.parsedFileList = e;
        return _this.tree.render(_this.parsedFileList);
      });
    };

    DcmViewer.prototype.eventHandler = function(e) {
      var eventFunc, _ref, _ref1;
      if (this.eventsEnabled) {
        e.x = (_ref = e.offsetX) != null ? _ref : e.pageX - $(e.target).offset().left;
        e.y = (_ref1 = e.offsetY) != null ? _ref1 : e.pageY - $(e.target).offset().top;
        $('.xPos').text("X: " + (e.x.toFixed(0)));
        $('.yPos').text("Y: " + (e.y.toFixed(0)));
        eventFunc = this.toolbox.currentTool[e.type];
        if (eventFunc) {
          return eventFunc(e.x, e.y, this.painters, e.target);
        }
      }
    };

    DcmViewer.prototype.scrollHandler = function(evt) {
      var delta, e, i, index, instanceNumber, painter, _i, _len, _ref, _ref1;
      if (this.numFiles > 1 && this.eventsEnabled) {
        evt.preventDefault();
        e = evt.originalEvent;
        delta = e.detail ? e.detail : -e.wheelDelta / 3.0;
        this.scrollIndex = delta >= 1 ? this.scrollIndex + 1 : (delta <= -1 ? this.scrollIndex - 1 : this.scrollIndex);
        this.scrollIndex = this.scrollIndex < 0 ? this.numFiles - 1 : (this.scrollIndex > this.numFiles - 1 ? 0 : this.scrollIndex);
        _ref = this.painters;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          painter = _ref[i];
          index = (this.scrollIndex + i) % this.numFiles;
          painter.currentFile = painter.series[index];
          this.painters[i] = painter;
          painter.drawImg();
          instanceNumber = (_ref1 = painter.currentFile.InstanceNumber) != null ? _ref1 : " - ";
          $(getSelector(painter) + ' #instanceNum').text("" + instanceNumber + " / " + this.numFiles);
        }
        return this.scrollIndex;
      }
    };

    DcmViewer.prototype.scrollOne = function(scrollIndex) {
      var i, index, instanceNumber, painter, _i, _len, _ref, _ref1, _results;
      this.scrollIndex = scrollIndex;
      _ref = this.painters;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        painter = _ref[i];
        index = (this.scrollIndex + i) % this.numFiles;
        painter.currentFile = painter.series[index];
        this.painters[i] = painter;
        painter.drawImg();
        instanceNumber = (_ref1 = painter.currentFile.InstanceNumber) != null ? _ref1 : " - ";
        _results.push($(getSelector(painter) + ' #instanceNum').text("" + instanceNumber + " / " + this.numFiles));
      }
      return _results;
    };

    DcmViewer.prototype.matrixHandler = function(e) {
      var cellHeight, cellWidth, columns, height, index, newId, newPainters, rowName, rows, tmpId, tmpPainter, width, x, y, _i, _j;
      rows = e.split(',')[0];
      columns = e.split(',')[1];
      width = parseInt($('#viewer').width());
      height = parseInt($('#viewer').height()) - 72 - (rows * 0.5);
      cellWidth = width / columns;
      cellHeight = height / rows;
      $('#viewerScreen').empty();
      newPainters = [];
      for (y = _i = 0; 0 <= rows ? _i < rows : _i > rows; y = 0 <= rows ? ++_i : --_i) {
        rowName = "row" + y;
        $('#viewerScreen').append("<div id='" + rowName + "' class='viewerRows'></div>");
        for (x = _j = 0; 0 <= columns ? _j < columns : _j > columns; x = 0 <= columns ? ++_j : --_j) {
          $("#" + rowName).append("<div id='column" + x + "' class='viewerCells' style='width: " + cellWidth + "px; height: " + cellHeight + "px;'></div>");
          tmpId = "#" + rowName + " #column" + x;
          newId = "canvas" + x + y;
          $(tmpId).append("<canvas id='" + newId + "' width='" + cellWidth + "px' height='" + cellHeight + "px'>Your browser does not support HTML5 canvas</canvas>");
          $(tmpId).append("<div class='studyInfo'></div>");
          $(tmpId).append("<div class='patientInfo'></div>");
          tmpPainter = new CanvasPainter(newId);
          newPainters.push(tmpPainter);
          if (this.eventsEnabled) {
            index = (this.scrollIndex + x + y) % this.numFiles;
            tmpPainter.setSeries(this.painters[0].series);
            tmpPainter.currentFile = tmpPainter.series[index];
            tmpPainter.setWindowing(this.painters[0].getWindowing()[0], this.painters[0].getWindowing()[1]);
            tmpPainter.setPan(this.painters[0].getPan()[0], this.painters[0].getPan()[1]);
            tmpPainter.drawImg();
            updateInfo(tmpPainter, getSelector(tmpPainter));
          }
        }
      }
      if ($('#showStudyData').val() === 'true') {
        $('.studyInfo').show();
        $('.patientInfo').show();
      } else {
        $('.studyInfo').hide();
        $('.patientInfo').hide();
      }
      return this.painters = newPainters;
    };

    DcmViewer.prototype.resetHandler = function() {
      var painter, _i, _len, _ref, _results;
      if (this.eventsEnabled) {
        _ref = this.painters;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          painter = _ref[_i];
          _results.push(painter.reset());
        }
        return _results;
      }
    };

    DcmViewer.prototype.treeClick = function(e) {
      var num, serie;
      if (e.target.nodeName === 'A' && e.target.dataset.type === 'file') {
        serie = (function() {
          var _i, _len, _ref, _results;
          _ref = e.target.dataset.index.split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            num = _ref[_i];
            _results.push(this.parsedFileList[num]);
          }
          return _results;
        }).call(this);
        return this.showSeries(serie);
      }
    };

    DcmViewer.prototype.openMetaDialog = function() {
      var body, cell1, cell2, currentRow, file, head, headCell1, headCell2, headRow, headText1, headText2, key, sortObject, table, text1, text2, value;
      sortObject = function(o) {
        var a, key, sorted, _i, _ref;
        sorted = {};
        key = [];
        a = [];
        for (key in o) {
          if (o.hasOwnProperty(key)) {
            a.push(key);
          }
        }
        a.sort();
        for (key = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
          sorted[a[key]] = o[a[key]];
        }
        return sorted;
      };
      file = sortObject(this.painters[0].currentFile);
      table = document.createElement('table');
      head = document.createElement('thead');
      headRow = document.createElement('tr');
      headCell1 = document.createElement('th');
      headText1 = document.createTextNode('Field Name');
      headCell1.appendChild(headText1);
      headCell2 = document.createElement('th');
      headText2 = document.createTextNode('Content');
      headCell2.appendChild(headText2);
      headRow.appendChild(headCell1);
      headRow.appendChild(headCell2);
      head.appendChild(headRow);
      table.appendChild(head);
      body = document.createElement('tbody');
      for (key in file) {
        value = file[key];
        if (!$.isFunction(value)) {
          currentRow = document.createElement('tr');
          cell1 = document.createElement('td');
          text1 = document.createTextNode(key);
          cell1.appendChild(text1);
          cell2 = document.createElement('td');
          text2 = document.createTextNode(value);
          cell2.appendChild(text2);
          currentRow.appendChild(cell1);
          currentRow.appendChild(cell2);
          body.appendChild(currentRow);
        }
      }
      table.appendChild(body);
      return table;
    };

    updateInfo = function(painter, selector) {
      var d, instanceNum, isValidDate, li11, li12, li13, li14, li21, li22, li23, li24, li25, pDate, pID, pName, pSex, sDate, sDesc, time, ul1, ul2, x;
      isValidDate = function(d) {
        if (Object.prototype.toString.call(d) !== '[object Date]') {
          return false;
        }
        return !isNaN(d.getTime());
      };
      pName = painter.currentFile.PatientsName ? painter.currentFile.PatientsName : ' - ';
      pSex = painter.currentFile.PatientsSex ? " (" + painter.currentFile.PatientsSex + ") " : ' ';
      pID = painter.currentFile.PatientID ? painter.currentFile.PatientID : ' - ';
      x = painter.currentFile.PatientsBirthDate;
      instanceNum = painter.currentFile.InstanceNumber ? painter.currentFile.InstanceNumber : " - ";
      x = painter.currentFile.SeriesDate;
      time = painter.currentFile.SeriesTime;
      pDate = '';
      sDate = '';
      if (x) {
        d = new Date("" + (x.slice(0, 4)) + "/" + (x.slice(4, 6)) + "/" + (x.slice(6, 8)));
        if (isValidDate(d)) {
          pDate = d.toLocaleDateString();
          sDate = d.toLocaleDateString();
          if (painter.currentFile.PatientsAge) {
            pDate += "  " + painter.currentFile.PatientsAge;
          }
          if (time) {
            sDate += "  " + (time.slice(0, 2)) + ":" + (time.slice(2, 4)) + ":" + (time.slice(4, 6));
          }
        }
      }
      sDesc = painter.currentFile.StudyDescription ? painter.currentFile.StudyDescription : ' - ';
      ul1 = document.createElement('ul');
      li11 = document.createElement('li');
      li11.appendChild(document.createTextNode(pName + pSex + pID));
      li12 = document.createElement('li');
      li12.appendChild(document.createTextNode(pDate));
      li13 = document.createElement('li');
      li13.appendChild(document.createTextNode(sDesc));
      li14 = document.createElement('li');
      li14.appendChild(document.createTextNode(sDate));
      ul1.appendChild(li11);
      ul1.appendChild(li12);
      ul1.appendChild(li13);
      ul1.appendChild(li14);
      ul2 = document.createElement('ul');
      li21 = document.createElement('li');
      li21.appendChild(document.createTextNode("WC: " + (painter.wc.toFixed(0))));
      li21.setAttribute("class", "wCenter");
      li22 = document.createElement('li');
      li22.appendChild(document.createTextNode("WW: " + (painter.ww.toFixed(0))));
      li22.setAttribute("class", "wWidth");
      li23 = document.createElement('li');
      li23.appendChild(document.createTextNode('X: 0'));
      li23.setAttribute("class", "xPos");
      li24 = document.createElement('li');
      li24.appendChild(document.createTextNode('Y: 0'));
      li24.setAttribute("class", "yPos");
      li25 = document.createElement('li');
      li25.appendChild(document.createTextNode("" + instanceNum + " / " + painter.series.length));
      li25.setAttribute("id", "instanceNum");
      ul2.appendChild(li21);
      ul2.appendChild(li22);
      ul2.appendChild(li23);
      ul2.appendChild(li24);
      ul2.appendChild(li25);
      $("" + selector + " .studyInfo").empty().append(ul2);
      return $("" + selector + " .patientInfo").empty().append(ul1);
    };

    getSelector = function(painter) {
      return "#row" + (painter.canvas.id.charAt(7)) + " #column" + (painter.canvas.id.charAt(6));
    };

    return DcmViewer;

  })();

}).call(this);
