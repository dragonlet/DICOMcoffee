// Generated by CoffeeScript 1.6.3
/*
@desc Takes the files of the HTML input and parses them with the DicomParser.
@author Michael Kaserer e1025263@student.tuwien.ac.at
*/


(function() {
  this.FileParser = (function() {
    function FileParser() {
      this.files = [];
    }

    FileParser.prototype.parseFiles = function(rawFiles, callback) {
      var goal, rawFile, setupReader, _i, _len, _results,
        _this = this;
      this.files = [];
      goal = rawFiles.length;
      setupReader = function(rawFile) {
        var reader;
        reader = new FileReader();
        reader.readAsArrayBuffer(rawFile);
        reader.onload = function(e) {
          var array, file, parser;
          if (e.target.readyState === FileReader.DONE) {
            array = new Uint8Array(e.target.result);
            parser = new DicomParser(array);
            file = parser.parse_file();
            if (file == null) {
              goal -= 1;
              $('#errorMsg').append("<p class='ui-state-error ui-corner-all'><span class='ui-icon ui-icon-alert'></span>Can't read file: " + rawFile.name + "</p>");
              return;
            }
            if (file.RescaleSlope == null) {
              file.RescaleSlope = 1;
            }
            if (file.RescaleIntercept == null) {
              file.RescaleIntercept = 0;
            }
            if (file.WindowCenter == null) {
              file.WindowCenter = 85;
            }
            if (file.WindowWidth == null) {
              file.WindowWidth = 171;
            }
            if ($.isArray(file.WindowCenter)) {
              file.WindowCenter = file.WindowCenter[0];
            }
            if ($.isArray(file.WindowWidth)) {
              file.WindowWidth = file.WindowWidth[0];
            }
            return _this.files.push(file);
          }
        };
        reader.onloadend = function(e) {
          if (_this.files.length === goal) {
            _this.files.sort(function(a, b) {
              var A, B;
              A = a.PatientsName.toLowerCase();
              B = b.PatientsName.toLowerCase();
              if (A < B) {
                return -1;
              }
              if (A > B) {
                return 1;
              }
              return 0;
            });
            return callback(_this.files);
          }
        };
        return reader.onerror = function(e) {
          e = e || window.event;
          switch (e.target.error.code) {
            case e.target.error.NOT_FOUND_ERR:
              return $('#errorMsg').append("<p>File not found!</p>");
            case e.target.error.NOT_READABLE_ERR:
              return $('#errorMsg').append("<p>File not readable</p>");
            case e.target.error.ABORT_ERR:
              return $('#errorMsg').append("<p>Read operation was aborted</p>");
            case e.target.error.SECURITY_ERR:
              return $('#errorMsg').append("<p>File is in a locked state</p>");
            case e.target.error.ENCODING_ERR:
              return $('#errorMsg').append("<p>Encoding error</p>");
            default:
              return $('#errorMsg').append("<p>Read error</p>");
          }
        };
      };
      _results = [];
      for (_i = 0, _len = rawFiles.length; _i < _len; _i++) {
        rawFile = rawFiles[_i];
        _results.push(setupReader(rawFile));
      }
      return _results;
    };

    return FileParser;

  })();

}).call(this);
